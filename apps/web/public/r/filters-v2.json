{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "filters-v2",
  "type": "registry:block",
  "title": "Data table filter",
  "author": "Kian Bazarjani <kian@bazza.dev>",
  "description": "A powerful data table filter component inspired by Linear.",
  "dependencies": ["@tanstack/react-table@8.21.2", "date-fns"],
  "registryDependencies": [
    "button",
    "calendar",
    "checkbox",
    "command",
    "dropdown-menu",
    "input",
    "label",
    "popover",
    "separator",
    "slider",
    "table",
    "tabs",
    "use-mobile"
  ],
  "files": [
    {
      "path": "registry/data-table-filter-v2/index.tsx",
      "content": "export * from '@/registry/data-table-filter-v2/components/data-table-filter'\nexport * from '@/registry/data-table-filter-v2/hooks/use-data-table-filters'\n",
      "type": "registry:file",
      "target": "components/data-table-filter/index.tsx"
    },
    {
      "path": "registry/data-table-filter-v2/components/active-filters.tsx",
      "content": "import { Button } from '@/components/ui/button'\nimport { Separator } from '@/components/ui/separator'\nimport { FilterOperator } from '@/registry/data-table-filter-v2/components/filter-operator'\nimport { FilterSubject } from '@/registry/data-table-filter-v2/components/filter-subject'\nimport { FilterValue } from '@/registry/data-table-filter-v2/components/filter-value'\nimport { getColumn } from '@/registry/data-table-filter-v2/core/filters'\nimport type {\n  Column,\n  ColumnDataType,\n  DataTableFilterActions,\n  FilterModel,\n  FiltersState,\n} from '@/registry/data-table-filter-v2/core/types'\nimport { XIcon } from 'lucide-react'\nimport { useEffect, useRef, useState } from 'react'\n\ninterface ActiveFiltersProps<TData> {\n  columns: Column<TData>[]\n  filters: FiltersState\n  actions: DataTableFilterActions\n}\n\nexport function ActiveFilters<TData>({\n  columns,\n  filters,\n  actions,\n}: ActiveFiltersProps<TData>) {\n  return (\n    <>\n      {filters.map((filter) => {\n        const id = filter.columnId\n\n        const column = getColumn(columns, id)\n\n        // Skip if no filter value\n        if (!filter.values) return null\n\n        return (\n          <ActiveFilter\n            key={`active-filter-${filter.columnId}`}\n            filter={filter}\n            column={column}\n            actions={actions}\n          />\n        )\n      })}\n    </>\n  )\n}\n\ninterface ActiveFilterProps<TData, TType extends ColumnDataType> {\n  filter: FilterModel<TType>\n  column: Column<TData, TType>\n  actions: DataTableFilterActions\n}\n\n// Generic render function for a filter with type-safe value\nexport function ActiveFilter<TData, TType extends ColumnDataType>({\n  filter,\n  column,\n  actions,\n}: ActiveFilterProps<TData, TType>) {\n  return (\n    <div className=\"flex h-7 items-center rounded-2xl border border-border bg-background shadow-xs text-xs\">\n      <FilterSubject column={column} />\n      <Separator orientation=\"vertical\" />\n      <FilterOperator filter={filter} column={column} actions={actions} />\n      <Separator orientation=\"vertical\" />\n      <FilterValue filter={filter} column={column} actions={actions} />\n      <Separator orientation=\"vertical\" />\n      <Button\n        variant=\"ghost\"\n        className=\"rounded-none rounded-r-2xl text-xs w-7 h-full\"\n        onClick={() => actions.removeFilter(filter.columnId)}\n      >\n        <XIcon className=\"size-4 -translate-x-0.5\" />\n      </Button>\n    </div>\n  )\n}\n\nexport function ActiveFiltersMobileContainer({\n  children,\n}: { children: React.ReactNode }) {\n  const scrollContainerRef = useRef<HTMLDivElement>(null)\n  const [showLeftBlur, setShowLeftBlur] = useState(false)\n  const [showRightBlur, setShowRightBlur] = useState(true)\n\n  // Check if there's content to scroll and update blur states\n  const checkScroll = () => {\n    if (scrollContainerRef.current) {\n      const { scrollLeft, scrollWidth, clientWidth } =\n        scrollContainerRef.current\n\n      // Show left blur if scrolled to the right\n      setShowLeftBlur(scrollLeft > 0)\n\n      // Show right blur if there's more content to scroll to the right\n      // Add a small buffer (1px) to account for rounding errors\n      setShowRightBlur(scrollLeft + clientWidth < scrollWidth - 1)\n    }\n  }\n\n  // Log blur states for debugging\n  // useEffect(() => {\n  //   console.log('left:', showLeftBlur, '  right:', showRightBlur)\n  // }, [showLeftBlur, showRightBlur])\n\n  // Set up ResizeObserver to monitor container size\n  // biome-ignore lint/correctness/useExhaustiveDependencies: <explanation>\n  useEffect(() => {\n    if (scrollContainerRef.current) {\n      const resizeObserver = new ResizeObserver(() => {\n        checkScroll()\n      })\n      resizeObserver.observe(scrollContainerRef.current)\n      return () => {\n        resizeObserver.disconnect()\n      }\n    }\n  }, [])\n\n  // Update blur states when children change\n  // biome-ignore lint/correctness/useExhaustiveDependencies: <explanation>\n  useEffect(() => {\n    checkScroll()\n  }, [children])\n\n  return (\n    <div className=\"relative w-full overflow-x-hidden\">\n      {/* Left blur effect */}\n      {showLeftBlur && (\n        <div className=\"absolute left-0 top-0 bottom-0 w-16 z-10 pointer-events-none bg-gradient-to-r from-background to-transparent animate-in fade-in-0\" />\n      )}\n\n      {/* Scrollable container */}\n      <div\n        ref={scrollContainerRef}\n        className=\"flex gap-2 overflow-x-scroll no-scrollbar\"\n        onScroll={checkScroll}\n      >\n        {children}\n      </div>\n\n      {/* Right blur effect */}\n      {showRightBlur && (\n        <div className=\"absolute right-0 top-0 bottom-0 w-16 z-10 pointer-events-none bg-gradient-to-l from-background to-transparent animate-in fade-in-0 \" />\n      )}\n    </div>\n  )\n}\n",
      "type": "registry:file",
      "target": "components/data-table-filter/components/active-filters.tsx"
    },
    {
      "path": "registry/data-table-filter-v2/components/data-table-filter.tsx",
      "content": "'use client'\n\nimport { ActiveFilters } from '@/registry/data-table-filter-v2/components/active-filters'\nimport { FilterActions } from '@/registry/data-table-filter-v2/components/filter-actions'\nimport { FilterSelector } from '@/registry/data-table-filter-v2/components/filter-selector'\nimport type {\n  Column,\n  DataTableFilterActions,\n  FiltersState,\n} from '@/registry/data-table-filter-v2/core/types'\n\ninterface DataTableFilterProps<TData> {\n  columns: Column<TData>[]\n  filters: FiltersState\n  actions: DataTableFilterActions\n}\n\nexport function DataTableFilter<TData>({\n  columns,\n  filters,\n  actions,\n}: DataTableFilterProps<TData>) {\n  // const isMobile = useIsMobile()\n  // if (isMobile) {\n  //   return (\n  //     <div className=\"flex w-full items-start justify-between gap-2\">\n  //       <div className=\"flex gap-1\">\n  //         <FilterSelector\n  //           filters={filters}\n  //           columns={columns}\n  //           actions={actions}\n  //         />\n  //         <FilterActions filters={filters} actions={actions} />\n  //       </div>\n  //       <ActiveFiltersMobileContainer>\n  //         <ActiveFilters\n  //           columns={columns}\n  //           filters={filters}\n  //           actions={actions}\n  //         />\n  //       </ActiveFiltersMobileContainer>\n  //     </div>\n  //   )\n  // }\n\n  return (\n    <div className=\"flex w-full items-start justify-between gap-2\">\n      <div className=\"flex md:flex-wrap gap-2 w-full flex-1\">\n        <FilterSelector columns={columns} filters={filters} actions={actions} />\n        <ActiveFilters columns={columns} filters={filters} actions={actions} />\n      </div>\n      <FilterActions hasFilters={filters.length > 0} actions={actions} />\n    </div>\n  )\n}\n",
      "type": "registry:file",
      "target": "components/data-table-filter/components/data-table-filter.tsx"
    },
    {
      "path": "registry/data-table-filter-v2/components/filter-actions.tsx",
      "content": "import { Button } from '@/components/ui/button'\nimport { cn } from '@/lib/utils'\nimport type { DataTableFilterActions } from '@/registry/data-table-filter-v2/core/types'\nimport { FilterXIcon } from 'lucide-react'\nimport { memo } from 'react'\n\ninterface FilterActionsProps {\n  hasFilters: boolean\n  actions?: DataTableFilterActions\n}\n\nexport const FilterActions = memo(__FilterActions)\nfunction __FilterActions({ hasFilters, actions }: FilterActionsProps) {\n  return (\n    <Button\n      className={cn('h-7 !px-2', !hasFilters && 'hidden')}\n      variant=\"destructive\"\n      onClick={actions?.removeAllFilters}\n    >\n      <FilterXIcon />\n      <span className=\"hidden md:block\">Clear</span>\n    </Button>\n  )\n}\n",
      "type": "registry:file",
      "target": "components/data-table-filter/components/filter-actions.tsx"
    },
    {
      "path": "registry/data-table-filter-v2/components/filter-operator.tsx",
      "content": "import { Button } from '@/components/ui/button'\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from '@/components/ui/command'\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/ui/popover'\nimport {\n  dateFilterDetails,\n  filterTypeOperatorDetails,\n  multiOptionFilterDetails,\n  numberFilterDetails,\n  optionFilterDetails,\n  textFilterDetails,\n} from '@/registry/data-table-filter-v2/core/operators'\nimport type {\n  Column,\n  ColumnDataType,\n  DataTableFilterActions,\n  FilterModel,\n  FilterOperators,\n} from '@/registry/data-table-filter-v2/core/types'\nimport { useState } from 'react'\n\ninterface FilterOperatorProps<TData, TType extends ColumnDataType> {\n  column: Column<TData, TType>\n  filter: FilterModel<TType>\n  actions: DataTableFilterActions\n}\n\n// Renders the filter operator display and menu for a given column filter\n// The filter operator display is the label and icon for the filter operator\n// The filter operator menu is the dropdown menu for the filter operator\nexport function FilterOperator<TData, TType extends ColumnDataType>({\n  column,\n  filter,\n  actions,\n}: FilterOperatorProps<TData, TType>) {\n  const [open, setOpen] = useState<boolean>(false)\n\n  const close = () => setOpen(false)\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"ghost\"\n          className=\"m-0 h-full w-fit whitespace-nowrap rounded-none p-0 px-2 text-xs\"\n        >\n          <FilterOperatorDisplay filter={filter} columnType={column.type} />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent\n        align=\"start\"\n        className=\"w-fit p-0 origin-(--radix-popover-content-transform-origin)\"\n      >\n        <Command loop>\n          <CommandInput placeholder=\"Search...\" />\n          <CommandEmpty>No results.</CommandEmpty>\n          <CommandList className=\"max-h-fit\">\n            <FilterOperatorController\n              filter={filter}\n              column={column}\n              actions={actions}\n              closeController={close}\n            />\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  )\n}\n\ninterface FilterOperatorDisplayProps<TType extends ColumnDataType> {\n  filter: FilterModel<TType>\n  columnType: TType\n}\n\nexport function FilterOperatorDisplay<TType extends ColumnDataType>({\n  filter,\n  columnType,\n}: FilterOperatorDisplayProps<TType>) {\n  const operator = filterTypeOperatorDetails[columnType][filter.operator]\n\n  return <span>{operator.label}</span>\n}\n\ninterface FilterOperatorControllerProps<TData, TType extends ColumnDataType> {\n  filter: FilterModel<TType>\n  column: Column<TData, TType>\n  actions: DataTableFilterActions\n  closeController: () => void\n}\n\n/*\n *\n * TODO: Reduce into a single component. Each data type does not need it's own controller.\n *\n */\nexport function FilterOperatorController<TData, TType extends ColumnDataType>({\n  filter,\n  column,\n  actions,\n  closeController,\n}: FilterOperatorControllerProps<TData, TType>) {\n  switch (column.type) {\n    case 'option':\n      return (\n        <FilterOperatorOptionController\n          filter={filter as FilterModel<'option'>}\n          column={column as Column<TData, 'option'>}\n          actions={actions}\n          closeController={closeController}\n        />\n      )\n    case 'multiOption':\n      return (\n        <FilterOperatorMultiOptionController\n          filter={filter as FilterModel<'multiOption'>}\n          column={column as Column<TData, 'multiOption'>}\n          actions={actions}\n          closeController={closeController}\n        />\n      )\n    case 'date':\n      return (\n        <FilterOperatorDateController\n          filter={filter as FilterModel<'date'>}\n          column={column as Column<TData, 'date'>}\n          actions={actions}\n          closeController={closeController}\n        />\n      )\n    case 'text':\n      return (\n        <FilterOperatorTextController\n          filter={filter as FilterModel<'text'>}\n          column={column as Column<TData, 'text'>}\n          actions={actions}\n          closeController={closeController}\n        />\n      )\n    case 'number':\n      return (\n        <FilterOperatorNumberController\n          filter={filter as FilterModel<'number'>}\n          column={column as Column<TData, 'number'>}\n          actions={actions}\n          closeController={closeController}\n        />\n      )\n    default:\n      return null\n  }\n}\n\nfunction FilterOperatorOptionController<TData>({\n  filter,\n  column,\n  actions,\n  closeController,\n}: FilterOperatorControllerProps<TData, 'option'>) {\n  const filterDetails = optionFilterDetails[filter.operator]\n\n  // console.log(\n  //   '[FilterOperatorOptionController] filterDetails:',\n  //   print(filterDetails),\n  // )\n\n  const relatedFilters = Object.values(optionFilterDetails).filter(\n    (o) => o.target === filterDetails.target,\n  )\n\n  const changeOperator = (value: string) => {\n    actions?.setFilterOperator(column.id, value as FilterOperators['option'])\n    closeController()\n  }\n\n  return (\n    <CommandGroup heading=\"Operators\">\n      {relatedFilters.map((r) => {\n        return (\n          <CommandItem onSelect={changeOperator} value={r.value} key={r.value}>\n            {r.label}\n          </CommandItem>\n        )\n      })}\n    </CommandGroup>\n  )\n}\n\nfunction FilterOperatorMultiOptionController<TData>({\n  filter,\n  column,\n  actions,\n  closeController,\n}: FilterOperatorControllerProps<TData, 'multiOption'>) {\n  const filterDetails = multiOptionFilterDetails[filter.operator]\n\n  const relatedFilters = Object.values(multiOptionFilterDetails).filter(\n    (o) => o.target === filterDetails.target,\n  )\n\n  const changeOperator = (value: string) => {\n    actions?.setFilterOperator(\n      column.id,\n      value as FilterOperators['multiOption'],\n    )\n    closeController()\n  }\n\n  return (\n    <CommandGroup heading=\"Operators\">\n      {relatedFilters.map((r) => {\n        return (\n          <CommandItem onSelect={changeOperator} value={r.value} key={r.value}>\n            {r.label}\n          </CommandItem>\n        )\n      })}\n    </CommandGroup>\n  )\n}\n\nfunction FilterOperatorDateController<TData>({\n  filter,\n  column,\n  actions,\n  closeController,\n}: FilterOperatorControllerProps<TData, 'date'>) {\n  const filterDetails = dateFilterDetails[filter.operator]\n\n  const relatedFilters = Object.values(dateFilterDetails).filter(\n    (o) => o.target === filterDetails.target,\n  )\n\n  const changeOperator = (value: string) => {\n    actions?.setFilterOperator(column.id, value as FilterOperators['date'])\n    closeController()\n  }\n\n  return (\n    <CommandGroup>\n      {relatedFilters.map((r) => {\n        return (\n          <CommandItem onSelect={changeOperator} value={r.value} key={r.value}>\n            {r.label}\n          </CommandItem>\n        )\n      })}\n    </CommandGroup>\n  )\n}\n\nexport function FilterOperatorTextController<TData>({\n  filter,\n  column,\n  actions,\n  closeController,\n}: FilterOperatorControllerProps<TData, 'text'>) {\n  const filterDetails = textFilterDetails[filter.operator]\n\n  const relatedFilters = Object.values(textFilterDetails).filter(\n    (o) => o.target === filterDetails.target,\n  )\n\n  const changeOperator = (value: string) => {\n    actions?.setFilterOperator(column.id, value as FilterOperators['text'])\n    closeController()\n  }\n\n  return (\n    <CommandGroup heading=\"Operators\">\n      {relatedFilters.map((r) => {\n        return (\n          <CommandItem onSelect={changeOperator} value={r.value} key={r.value}>\n            {r.label}\n          </CommandItem>\n        )\n      })}\n    </CommandGroup>\n  )\n}\n\nfunction FilterOperatorNumberController<TData>({\n  filter,\n  column,\n  actions,\n  closeController,\n}: FilterOperatorControllerProps<TData, 'number'>) {\n  // Show all related operators\n  const filterDetails = numberFilterDetails[filter.operator]\n\n  // console.log(\n  //   '[FilterOperatorOptionController] filterDetails:',\n  //   print(filterDetails),\n  // )\n\n  const relatedFilters = Object.values(numberFilterDetails).filter(\n    (o) => o.target === filterDetails.target,\n  )\n\n  const changeOperator = (value: string) => {\n    actions?.setFilterOperator(column.id, value as FilterOperators['number'])\n    closeController()\n  }\n\n  return (\n    <div>\n      <CommandGroup heading=\"Operators\">\n        {relatedFilters.map((r) => (\n          <CommandItem\n            onSelect={() => changeOperator(r.value)}\n            value={r.value}\n            key={r.value}\n          >\n            {r.label} {/**/}\n          </CommandItem>\n        ))}\n      </CommandGroup>\n    </div>\n  )\n}\n",
      "type": "registry:file",
      "target": "components/data-table-filter/components/filter-operator.tsx"
    },
    {
      "path": "registry/data-table-filter-v2/components/filter-selector.tsx",
      "content": "import { Button } from '@/components/ui/button'\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from '@/components/ui/command'\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/ui/popover'\nimport { cn } from '@/lib/utils'\nimport { FilterValueController } from '@/registry/data-table-filter-v2/components/filter-value'\nimport { getColumn } from '@/registry/data-table-filter-v2/core/filters'\nimport type {\n  Column,\n  ColumnDataType,\n  DataTableFilterActions,\n  FiltersState,\n} from '@/registry/data-table-filter-v2/core/types'\nimport { ArrowRightIcon, FilterIcon } from 'lucide-react'\nimport { memo, useCallback, useEffect, useMemo, useRef, useState } from 'react'\n\ninterface FilterSelectorProps<TData> {\n  filters: FiltersState\n  columns: Column<TData>[]\n  actions: DataTableFilterActions\n}\n\nexport const FilterSelector = memo(__FilterSelector) as typeof __FilterSelector\n\nfunction __FilterSelector<TData>({\n  filters,\n  columns,\n  actions,\n}: FilterSelectorProps<TData>) {\n  const [open, setOpen] = useState(false)\n  const [value, setValue] = useState('')\n  const [property, setProperty] = useState<string | undefined>(undefined)\n  const inputRef = useRef<HTMLInputElement>(null)\n\n  const column = property ? getColumn(columns, property) : undefined\n  const filter = property\n    ? filters.find((f) => f.columnId === property)\n    : undefined\n\n  const hasFilters = filters.length > 0\n\n  useEffect(() => {\n    if (property && inputRef) {\n      inputRef.current?.focus()\n      setValue('')\n    }\n  }, [property])\n\n  useEffect(() => {\n    if (!open) setTimeout(() => setValue(''), 150)\n  }, [open])\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: need filters to be updated\n  const content = useMemo(\n    () =>\n      property && column ? (\n        <FilterValueController\n          filter={filter!}\n          column={column as Column<TData, ColumnDataType>}\n          actions={actions}\n        />\n      ) : (\n        <Command loop>\n          <CommandInput\n            value={value}\n            onValueChange={setValue}\n            ref={inputRef}\n            placeholder=\"Search...\"\n          />\n          <CommandEmpty>No results.</CommandEmpty>\n          <CommandList className=\"max-h-fit\">\n            <CommandGroup>\n              {columns.map((column) => (\n                <FilterableColumn\n                  key={column.id}\n                  column={column}\n                  setProperty={setProperty}\n                />\n              ))}\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      ),\n    [property, column, filter, filters, columns, actions, value],\n  )\n\n  return (\n    <Popover\n      open={open}\n      onOpenChange={async (value) => {\n        setOpen(value)\n        if (!value) setTimeout(() => setProperty(undefined), 100)\n      }}\n    >\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          className={cn('h-7', hasFilters && 'w-fit !px-2')}\n        >\n          <FilterIcon className=\"size-4\" />\n          {!hasFilters && <span>Filter</span>}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent\n        align=\"start\"\n        side=\"bottom\"\n        className=\"w-fit p-0 origin-(--radix-popover-content-transform-origin)\"\n      >\n        {content}\n      </PopoverContent>\n    </Popover>\n  )\n}\n\nexport function FilterableColumn<TData, TType extends ColumnDataType, TVal>({\n  column,\n  setProperty,\n}: {\n  column: Column<TData, TType, TVal>\n  setProperty: (value: string) => void\n}) {\n  const itemRef = useRef<HTMLDivElement>(null)\n\n  const prefetch = useCallback(() => {\n    column.prefetchOptions()\n    column.prefetchValues()\n    column.prefetchFacetedUniqueValues()\n  }, [column])\n\n  useEffect(() => {\n    const target = itemRef.current\n\n    if (!target) return\n\n    // Set up MutationObserver\n    const observer = new MutationObserver((mutations) => {\n      for (const mutation of mutations) {\n        if (mutation.type === 'attributes') {\n          const isSelected = target.getAttribute('data-selected') === 'true'\n          if (isSelected) prefetch()\n        }\n      }\n    })\n\n    // Set up observer\n    observer.observe(target, {\n      attributes: true,\n      attributeFilter: ['data-selected'],\n    })\n\n    // Cleanup on unmount\n    return () => observer.disconnect()\n  }, [prefetch])\n\n  return (\n    <CommandItem\n      ref={itemRef}\n      onSelect={() => setProperty(column.id)}\n      className=\"group\"\n      onMouseEnter={prefetch}\n    >\n      <div className=\"flex w-full items-center justify-between\">\n        <div className=\"inline-flex items-center gap-1.5\">\n          {<column.icon strokeWidth={2.25} className=\"size-4\" />}\n          <span>{column.displayName}</span>\n        </div>\n        <ArrowRightIcon className=\"size-4 opacity-0 group-aria-selected:opacity-100\" />\n      </div>\n    </CommandItem>\n  )\n}\n",
      "type": "registry:file",
      "target": "components/data-table-filter/components/filter-selector.tsx"
    },
    {
      "path": "registry/data-table-filter-v2/components/filter-subject.tsx",
      "content": "import type {\n  Column,\n  ColumnDataType,\n} from '@/registry/data-table-filter-v2/core/types'\n\ninterface FilterSubjectProps<TData, TType extends ColumnDataType> {\n  column: Column<TData, TType>\n}\n\nexport function FilterSubject<TData, TType extends ColumnDataType>({\n  column,\n}: FilterSubjectProps<TData, TType>) {\n  const hasIcon = !!column.icon\n  return (\n    <span className=\"flex select-none items-center gap-1 whitespace-nowrap px-2 font-medium\">\n      {hasIcon && <column.icon className=\"size-4 stroke-[2.25px]\" />}\n      <span>{column.displayName}</span>\n    </span>\n  )\n}\n",
      "type": "registry:file",
      "target": "components/data-table-filter/components/filter-subject.tsx"
    },
    {
      "path": "registry/data-table-filter-v2/components/filter-value.tsx",
      "content": "import { Button } from '@/components/ui/button'\nimport { Calendar } from '@/components/ui/calendar'\nimport { Checkbox } from '@/components/ui/checkbox'\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from '@/components/ui/command'\nimport { Input } from '@/components/ui/input'\nimport {\n  Popover,\n  PopoverAnchor,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/ui/popover'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport { cn } from '@/lib/utils'\nimport { numberFilterDetails } from '@/registry/data-table-filter-v2/core/operators'\nimport type {\n  Column,\n  ColumnDataType,\n  DataTableFilterActions,\n  FilterModel,\n} from '@/registry/data-table-filter-v2/core/types'\nimport { take } from '@/registry/data-table-filter-v2/lib/array'\nimport { DebouncedInput } from '@/registry/data-table-filter-v2/ui/debounced-input'\nimport { Slider } from '@radix-ui/react-slider'\nimport { format, isEqual } from 'date-fns'\nimport { EllipsisIcon } from 'lucide-react'\nimport {\n  cloneElement,\n  isValidElement,\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react'\nimport type { DateRange } from 'react-day-picker'\n\ninterface FilterValueProps<TData, TType extends ColumnDataType> {\n  filter: FilterModel<TType>\n  column: Column<TData, TType>\n  actions: DataTableFilterActions\n}\n\nexport const FilterValue = memo(__FilterValue) as typeof __FilterValue\n\nfunction __FilterValue<TData, TType extends ColumnDataType>({\n  filter,\n  column,\n  actions,\n}: FilterValueProps<TData, TType>) {\n  return (\n    <Popover>\n      <PopoverAnchor className=\"h-full\" />\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"ghost\"\n          className=\"m-0 h-full w-fit whitespace-nowrap rounded-none p-0 px-2 text-xs\"\n        >\n          <FilterValueDisplay\n            filter={filter}\n            column={column}\n            actions={actions}\n          />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent\n        align=\"start\"\n        side=\"bottom\"\n        className=\"w-fit p-0 origin-(--radix-popover-content-transform-origin)\"\n      >\n        <FilterValueController\n          filter={filter}\n          column={column}\n          actions={actions}\n        />\n      </PopoverContent>\n    </Popover>\n  )\n}\n\ninterface FilterValueDisplayProps<TData, TType extends ColumnDataType> {\n  filter: FilterModel<TType>\n  column: Column<TData, TType>\n  actions: DataTableFilterActions\n}\n\nexport function FilterValueDisplay<TData, TType extends ColumnDataType>({\n  filter,\n  column,\n  actions,\n}: FilterValueDisplayProps<TData, TType>) {\n  switch (column.type) {\n    case 'option':\n      return (\n        <FilterValueOptionDisplay\n          filter={filter as FilterModel<'option'>}\n          column={column as Column<TData, 'option'>}\n          actions={actions}\n        />\n      )\n    case 'multiOption':\n      return (\n        <FilterValueMultiOptionDisplay\n          filter={filter as FilterModel<'multiOption'>}\n          column={column as Column<TData, 'multiOption'>}\n          actions={actions}\n        />\n      )\n    case 'date':\n      return (\n        <FilterValueDateDisplay\n          filter={filter as FilterModel<'date'>}\n          column={column as Column<TData, 'date'>}\n          actions={actions}\n        />\n      )\n    case 'text':\n      return (\n        <FilterValueTextDisplay\n          filter={filter as FilterModel<'text'>}\n          column={column as Column<TData, 'text'>}\n          actions={actions}\n        />\n      )\n    case 'number':\n      return (\n        <FilterValueNumberDisplay\n          filter={filter as FilterModel<'number'>}\n          column={column as Column<TData, 'number'>}\n          actions={actions}\n        />\n      )\n    default:\n      return null\n  }\n}\n\nexport function FilterValueOptionDisplay<TData>({\n  filter,\n  column,\n  actions,\n}: FilterValueDisplayProps<TData, 'option'>) {\n  const options = useMemo(() => column.getOptions(), [column])\n  const selected = options.filter((o) => filter?.values.includes(o.value))\n\n  // We display the selected options based on how many are selected\n  //\n  // If there is only one option selected, we display its icon and label\n  //\n  // If there are multiple options selected, we display:\n  // 1) up to 3 icons of the selected options\n  // 2) the number of selected options\n  if (selected.length === 1) {\n    const { label, icon: Icon } = selected[0]\n    const hasIcon = !!Icon\n    return (\n      <span className=\"inline-flex items-center gap-1\">\n        {hasIcon &&\n          (isValidElement(Icon) ? (\n            Icon\n          ) : (\n            <Icon className=\"size-4 text-primary\" />\n          ))}\n        <span>{label}</span>\n      </span>\n    )\n  }\n  const name = column.displayName.toLowerCase()\n  const pluralName = name.endsWith('s') ? `${name}es` : `${name}s`\n\n  const hasOptionIcons = !options?.some((o) => !o.icon)\n\n  return (\n    <div className=\"inline-flex items-center gap-0.5\">\n      {hasOptionIcons &&\n        take(selected, 3).map(({ value, icon }) => {\n          const Icon = icon!\n          return isValidElement(Icon) ? (\n            Icon\n          ) : (\n            <Icon key={value} className=\"size-4\" />\n          )\n        })}\n      <span className={cn(hasOptionIcons && 'ml-1.5')}>\n        {selected.length} {pluralName}\n      </span>\n    </div>\n  )\n}\n\nexport function FilterValueMultiOptionDisplay<TData>({\n  filter,\n  column,\n  actions,\n}: FilterValueDisplayProps<TData, 'multiOption'>) {\n  const options = useMemo(() => column.getOptions(), [column])\n  const selected = options.filter((o) => filter.values.includes(o.value))\n\n  if (selected.length === 1) {\n    const { label, icon: Icon } = selected[0]\n    const hasIcon = !!Icon\n    return (\n      <span className=\"inline-flex items-center gap-1.5\">\n        {hasIcon &&\n          (isValidElement(Icon) ? (\n            Icon\n          ) : (\n            <Icon className=\"size-4 text-primary\" />\n          ))}\n\n        <span>{label}</span>\n      </span>\n    )\n  }\n\n  const name = column.displayName.toLowerCase()\n\n  const hasOptionIcons = !options?.some((o) => !o.icon)\n\n  return (\n    <div className=\"inline-flex items-center gap-1.5\">\n      {hasOptionIcons && (\n        <div key=\"icons\" className=\"inline-flex items-center gap-0.5\">\n          {take(selected, 3).map(({ value, icon }) => {\n            const Icon = icon!\n            return isValidElement(Icon) ? (\n              cloneElement(Icon, { key: value })\n            ) : (\n              <Icon key={value} className=\"size-4\" />\n            )\n          })}\n        </div>\n      )}\n      <span>\n        {selected.length} {name}\n      </span>\n    </div>\n  )\n}\n\nfunction formatDateRange(start: Date, end: Date) {\n  const sameMonth = start.getMonth() === end.getMonth()\n  const sameYear = start.getFullYear() === end.getFullYear()\n\n  if (sameMonth && sameYear) {\n    return `${format(start, 'MMM d')} - ${format(end, 'd, yyyy')}`\n  }\n\n  if (sameYear) {\n    return `${format(start, 'MMM d')} - ${format(end, 'MMM d, yyyy')}`\n  }\n\n  return `${format(start, 'MMM d, yyyy')} - ${format(end, 'MMM d, yyyy')}`\n}\n\nexport function FilterValueDateDisplay<TData>({\n  filter,\n  column,\n  actions,\n}: FilterValueDisplayProps<TData, 'date'>) {\n  if (!filter) return null\n  if (filter.values.length === 0) return <EllipsisIcon className=\"size-4\" />\n  if (filter.values.length === 1) {\n    const value = filter.values[0]\n\n    const formattedDateStr = format(value, 'MMM d, yyyy')\n\n    return <span>{formattedDateStr}</span>\n  }\n\n  const formattedRangeStr = formatDateRange(filter.values[0], filter.values[1])\n\n  return <span>{formattedRangeStr}</span>\n}\n\nexport function FilterValueTextDisplay<TData>({\n  filter,\n  column,\n  actions,\n}: FilterValueDisplayProps<TData, 'text'>) {\n  if (!filter) return null\n  if (filter.values.length === 0 || filter.values[0].trim() === '')\n    return <EllipsisIcon className=\"size-4\" />\n\n  const value = filter.values[0]\n\n  return <span>{value}</span>\n}\n\nexport function FilterValueNumberDisplay<TData>({\n  filter,\n  column,\n  actions,\n}: FilterValueDisplayProps<TData, 'number'>) {\n  const maxFromMeta = column.max\n  const cappedMax = maxFromMeta ?? 2147483647\n\n  if (!filter) return null\n\n  if (\n    filter.operator === 'is between' ||\n    filter.operator === 'is not between'\n  ) {\n    const minValue = filter.values[0]\n    const maxValue =\n      filter.values[1] === Number.POSITIVE_INFINITY ||\n      filter.values[1] >= cappedMax\n        ? `${cappedMax}+`\n        : filter.values[1]\n\n    return (\n      <span className=\"tabular-nums tracking-tight\">\n        {minValue} and {maxValue}\n      </span>\n    )\n  }\n\n  if (!filter.values || filter.values.length === 0) {\n    return null\n  }\n\n  const value = filter.values[0]\n  return <span className=\"tabular-nums tracking-tight\">{value}</span>\n}\n\n/****** Property Filter Value Controller ******/\n\ninterface FilterValueControllerProps<TData, TType extends ColumnDataType> {\n  filter: FilterModel<TType>\n  column: Column<TData, TType>\n  actions: DataTableFilterActions\n}\n\nexport const FilterValueController = memo(\n  __FilterValueController,\n) as typeof __FilterValueController\n\nfunction __FilterValueController<TData, TType extends ColumnDataType>({\n  filter,\n  column,\n  actions,\n}: FilterValueControllerProps<TData, TType>) {\n  switch (column.type) {\n    case 'option':\n      return (\n        <FilterValueOptionController\n          filter={filter as FilterModel<'option'>}\n          column={column as Column<TData, 'option'>}\n          actions={actions}\n        />\n      )\n    case 'multiOption':\n      return (\n        <FilterValueMultiOptionController\n          filter={filter as FilterModel<'multiOption'>}\n          column={column as Column<TData, 'multiOption'>}\n          actions={actions}\n        />\n      )\n    case 'date':\n      return (\n        <FilterValueDateController\n          filter={filter as FilterModel<'date'>}\n          column={column as Column<TData, 'date'>}\n          actions={actions}\n        />\n      )\n    case 'text':\n      return (\n        <FilterValueTextController\n          filter={filter as FilterModel<'text'>}\n          column={column as Column<TData, 'text'>}\n          actions={actions}\n        />\n      )\n    case 'number':\n      return (\n        <FilterValueNumberController\n          filter={filter as FilterModel<'number'>}\n          column={column as Column<TData, 'number'>}\n          actions={actions}\n        />\n      )\n    default:\n      return null\n  }\n}\n\nexport function FilterValueOptionController<TData>({\n  filter,\n  column,\n  actions,\n}: FilterValueControllerProps<TData, 'option'>) {\n  const options = useMemo(() => column.getOptions(), [column])\n  const optionsCount = useMemo(() => column.getFacetedUniqueValues(), [column])\n\n  function handleOptionSelect(value: string, check: boolean) {\n    if (check) actions.addFilterValue(column, [value])\n    else actions.removeFilterValue(column, [value])\n  }\n\n  return (\n    <Command loop>\n      <CommandInput autoFocus placeholder=\"Search...\" />\n      <CommandEmpty>No results.</CommandEmpty>\n      <CommandList className=\"max-h-fit\">\n        <CommandGroup>\n          {options.map((v) => {\n            const checked = Boolean(filter?.values.includes(v.value))\n            const count = optionsCount.get(v.value) ?? 0\n\n            return (\n              <CommandItem\n                key={v.value}\n                onSelect={() => {\n                  handleOptionSelect(v.value, !checked)\n                }}\n                className=\"group flex items-center justify-between gap-1.5\"\n              >\n                <div className=\"flex items-center gap-1.5\">\n                  <Checkbox\n                    checked={checked}\n                    className=\"opacity-0 group-hover:opacity-100 data-[state=checked]:opacity-100\"\n                  />\n                  {v.icon &&\n                    (isValidElement(v.icon) ? (\n                      v.icon\n                    ) : (\n                      <v.icon className=\"size-4 text-primary\" />\n                    ))}\n                  <span>\n                    {v.label}\n                    <sup\n                      className={cn(\n                        'ml-0.5 tabular-nums tracking-tight text-muted-foreground',\n                        count === 0 && 'slashed-zero',\n                      )}\n                    >\n                      {count < 100 ? count : '100+'}\n                    </sup>\n                  </span>\n                </div>\n              </CommandItem>\n            )\n          })}\n        </CommandGroup>\n      </CommandList>\n    </Command>\n  )\n}\n\nexport function FilterValueMultiOptionController<TData>({\n  filter,\n  column,\n  actions,\n}: FilterValueControllerProps<TData, 'multiOption'>) {\n  const options = useMemo(() => column.getOptions(), [column])\n  const optionsCount = useMemo(() => column.getFacetedUniqueValues(), [column])\n\n  // Handles the selection/deselection of an option\n  function handleOptionSelect(value: string, check: boolean) {\n    if (check) actions.addFilterValue(column, [value])\n    else actions.removeFilterValue(column, [value])\n  }\n\n  return (\n    <Command loop>\n      <CommandInput autoFocus placeholder=\"Search...\" />\n      <CommandEmpty>No results.</CommandEmpty>\n      <CommandList>\n        <CommandGroup>\n          {options.map((v) => {\n            const checked = Boolean(filter?.values?.includes(v.value))\n            const count = optionsCount.get(v.value) ?? 0\n\n            return (\n              <CommandItem\n                key={v.value}\n                onSelect={() => {\n                  handleOptionSelect(v.value, !checked)\n                }}\n                className=\"group flex items-center justify-between gap-1.5\"\n              >\n                <div className=\"flex items-center gap-1.5\">\n                  <Checkbox\n                    checked={checked}\n                    className=\"opacity-0 group-hover:opacity-100 data-[state=checked]:opacity-100\"\n                  />\n                  {v.icon &&\n                    (isValidElement(v.icon) ? (\n                      v.icon\n                    ) : (\n                      <v.icon className=\"size-4 text-primary\" />\n                    ))}\n                  <span>\n                    {v.label}\n                    <sup\n                      className={cn(\n                        'ml-0.5 tabular-nums tracking-tight text-muted-foreground',\n                        count === 0 && 'slashed-zero',\n                      )}\n                    >\n                      {count < 100 ? count : '100+'}\n                    </sup>\n                  </span>\n                </div>\n              </CommandItem>\n            )\n          })}\n        </CommandGroup>\n      </CommandList>\n    </Command>\n  )\n}\n\nexport function FilterValueDateController<TData>({\n  filter,\n  column,\n  actions,\n}: FilterValueControllerProps<TData, 'date'>) {\n  const [date, setDate] = useState<DateRange | undefined>({\n    from: filter?.values[0] ?? new Date(),\n    to: filter?.values[1] ?? undefined,\n  })\n\n  function changeDateRange(value: DateRange | undefined) {\n    const start = value?.from\n    const end =\n      start && value && value.to && !isEqual(start, value.to)\n        ? value.to\n        : undefined\n\n    setDate({ from: start, to: end })\n\n    const isRange = start && end\n    const newValues = isRange ? [start, end] : start ? [start] : []\n\n    actions.setFilterValue(column, newValues)\n  }\n\n  return (\n    <Command>\n      <CommandList className=\"max-h-fit\">\n        <CommandGroup>\n          <div>\n            <Calendar\n              initialFocus\n              mode=\"range\"\n              defaultMonth={date?.from}\n              selected={date}\n              onSelect={changeDateRange}\n              numberOfMonths={1}\n            />\n          </div>\n        </CommandGroup>\n      </CommandList>\n    </Command>\n  )\n}\n\nexport function FilterValueTextController<TData>({\n  filter,\n  column,\n  actions,\n}: FilterValueControllerProps<TData, 'text'>) {\n  const changeText = (value: string | number) => {\n    actions.setFilterValue(column, [String(value)])\n  }\n\n  return (\n    <Command>\n      <CommandList className=\"max-h-fit\">\n        <CommandGroup>\n          <CommandItem>\n            <DebouncedInput\n              placeholder=\"Search...\"\n              autoFocus\n              value={filter?.values[0] ?? ''}\n              onChange={changeText}\n            />\n          </CommandItem>\n        </CommandGroup>\n      </CommandList>\n    </Command>\n  )\n}\n\nexport function FilterValueNumberController<TData>({\n  filter,\n  column,\n  actions,\n}: FilterValueControllerProps<TData, 'number'>) {\n  const [datasetMin, datasetMax] = useMemo(\n    () => column.getFacetedMinMaxValues(),\n    [column],\n  )\n  const [sliderMin, sliderMax] = [\n    column.min ?? datasetMin,\n    column.max ?? datasetMax,\n  ]\n\n  // Local state for values\n  const [values, setValues] = useState(filter?.values ?? [0, 0])\n\n  // Sync with parent filter changes\n  useEffect(() => {\n    // console.log('a')\n    if (\n      filter?.values &&\n      filter.values.length === values.length &&\n      filter.values.every((v, i) => v === values[i])\n    ) {\n      setValues(filter.values)\n    }\n  }, [filter?.values, values])\n\n  const isNumberRange =\n    filter && numberFilterDetails[filter.operator].target === 'multiple'\n\n  const changeNumber = (value: number[]) => {\n    setValues(value)\n    // console.log('a')\n    actions.setFilterValue(column, value)\n  }\n\n  const changeMinNumber = (value: number) => {\n    const newValues = [value, values[1]]\n    setValues(newValues)\n    console.log('[FilterValueNumberController] changeMinNumber')\n    actions.setFilterValue(column, newValues)\n  }\n\n  const changeMaxNumber = (value: number) => {\n    const newValues = [values[0], value]\n    setValues(newValues)\n    console.log('[FilterValueNumberController] changeMaxNumber')\n    actions.setFilterValue(column, newValues)\n  }\n\n  const changeType = useCallback(\n    (type: 'single' | 'range') => {\n      console.log('changeType to:', type)\n      const newValues =\n        type === 'single'\n          ? [values[0]] // Keep the first value for single mode\n          : [values[0], values[1] ?? datasetMax] // Use two values for range mode\n      const newOperator = type === 'single' ? 'is' : 'is between'\n\n      // Update local state\n      setValues(newValues)\n\n      // Update global filter state atomically\n      actions.setFilterOperator(column.id, newOperator)\n      actions.setFilterValue(column, newValues)\n    },\n    [values, datasetMax, column, actions],\n  )\n\n  return (\n    <Command>\n      <CommandList className=\"w-[300px] px-2 py-2\">\n        <CommandGroup>\n          <div className=\"flex flex-col w-full\">\n            <Tabs\n              value={isNumberRange ? 'range' : 'single'}\n              onValueChange={(v) => changeType(v as 'single' | 'range')}\n            >\n              <TabsList className=\"w-full *:text-xs\">\n                <TabsTrigger value=\"single\">Single</TabsTrigger>\n                <TabsTrigger value=\"range\">Range</TabsTrigger>\n              </TabsList>\n              <TabsContent value=\"single\" className=\"flex flex-col gap-4 mt-4\">\n                <Slider\n                  value={[values[0]]}\n                  onValueChange={(value) => changeNumber(value)}\n                  min={sliderMin}\n                  max={sliderMax}\n                  step={1}\n                  aria-orientation=\"horizontal\"\n                />\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"text-xs font-medium\">Value</span>\n                  <Input\n                    id=\"single\"\n                    type=\"number\"\n                    value={values[0].toString()} // Use values[0] directly\n                    onChange={(e) => changeNumber([Number(e.target.value)])}\n                    min={datasetMin}\n                    max={datasetMax}\n                  />\n                </div>\n              </TabsContent>\n              <TabsContent value=\"range\" className=\"flex flex-col gap-4 mt-4\">\n                <Slider\n                  value={values} // Use values directly\n                  onValueChange={changeNumber}\n                  min={sliderMin}\n                  max={sliderMax}\n                  step={1}\n                  aria-orientation=\"horizontal\"\n                />\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"text-xs font-medium\">Min</span>\n                    <DebouncedInput\n                      type=\"number\"\n                      value={values[0]}\n                      onChange={(v) => changeMinNumber(Number(v))}\n                      min={datasetMin}\n                      max={datasetMax}\n                    />\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"text-xs font-medium\">Max</span>\n                    <DebouncedInput\n                      type=\"number\"\n                      value={values[1]}\n                      onChange={(v) => changeMaxNumber(Number(v))}\n                      min={datasetMin}\n                      max={datasetMax}\n                    />\n                  </div>\n                </div>\n              </TabsContent>\n            </Tabs>\n          </div>\n        </CommandGroup>\n      </CommandList>\n    </Command>\n  )\n}\n",
      "type": "registry:file",
      "target": "components/data-table-filter/components/filter-value.tsx"
    },
    {
      "path": "registry/data-table-filter-v2/core/filters.ts",
      "content": "import type {\n  Column,\n  ColumnConfig,\n  ColumnConfigHelper,\n  ColumnDataType,\n  ColumnOption,\n  ElementType,\n  Nullable,\n} from '@/registry/data-table-filter-v2/core/types'\nimport { isAnyOf, uniq } from '@/registry/data-table-filter-v2/lib/array'\nimport { memo } from '@/registry/data-table-filter-v2/lib/memo'\n\nexport function createColumnConfigHelper<TData>(): ColumnConfigHelper<TData> {\n  return {\n    accessor: (accessor, config) =>\n      ({\n        ...config,\n        accessor,\n      }) as any,\n  }\n}\n\nexport function getColumnOptions<TData, TType extends ColumnDataType, TVal>(\n  column: ColumnConfig<TData, TType, TVal>,\n  data: TData[],\n): ColumnOption[] {\n  if (!isAnyOf(column.type, ['option', 'multiOption'])) {\n    console.warn(\n      'Column options can only be retrieved for option and multiOption columns',\n    )\n    return []\n  }\n\n  if (column.options) {\n    return column.options\n  }\n\n  const filtered = data\n    .flatMap(column.accessor)\n    .filter((v): v is NonNullable<TVal> => v !== undefined && v !== null)\n\n  // console.log(`[getColumnOptions] [${column.id}] filtered:`, filtered)\n\n  let models = uniq(filtered)\n\n  if (column.orderFn) {\n    models = models.sort((m1, m2) =>\n      column.orderFn!(\n        m1 as ElementType<NonNullable<TVal>>,\n        m2 as ElementType<NonNullable<TVal>>,\n      ),\n    )\n  }\n\n  // console.log(`[getColumnOptions] [${column.id}] models:`, models)\n\n  if (column.transformOptionFn) {\n    // Memoize transformOptionFn calls\n    const memoizedTransform = memo(\n      () => [models],\n      (deps) =>\n        deps[0].map((m) =>\n          column.transformOptionFn!(m as ElementType<NonNullable<TVal>>),\n        ),\n      { key: `transform-${column.id}` },\n    )\n    return memoizedTransform()\n  }\n\n  if (isColumnOptionArray(models)) return models\n\n  throw new Error(\n    `[data-table-filter] [${column.id}] Either provide static options, a transformOptionFn, or ensure the column data conforms to ColumnOption type`,\n  )\n}\n\nexport function getColumnValues<TData, TType extends ColumnDataType, TVal>(\n  column: ColumnConfig<TData, TType, TVal>,\n  data: TData[],\n) {\n  // Memoize accessor calls\n  const memoizedAccessor = memo(\n    () => [data],\n    (deps) =>\n      deps[0]\n        .flatMap(column.accessor)\n        .filter(\n          (v): v is NonNullable<TVal> => v !== undefined && v !== null,\n        ) as ElementType<NonNullable<TVal>>[],\n    { key: `accessor-${column.id}` },\n  )\n\n  const raw = memoizedAccessor()\n\n  if (!isAnyOf(column.type, ['option', 'multiOption'])) {\n    return raw\n  }\n\n  if (column.options) {\n    return raw\n      .map((v) => column.options?.find((o) => o.value === v)?.value)\n      .filter((v) => v !== undefined && v !== null)\n  }\n\n  if (column.transformOptionFn) {\n    const memoizedTransform = memo(\n      () => [raw],\n      (deps) =>\n        deps[0].map(\n          (v) => column.transformOptionFn!(v) as ElementType<NonNullable<TVal>>,\n        ),\n      { key: `transform-values-${column.id}` },\n    )\n    return memoizedTransform()\n  }\n\n  if (isColumnOptionArray(raw)) {\n    return raw\n  }\n\n  throw new Error(\n    `[data-table-filter] [${column.id}] Either provide static options, a transformOptionFn, or ensure the column data conforms to ColumnOption type`,\n  )\n}\n\nexport function getFacetedUniqueValues<\n  TData,\n  TType extends ColumnDataType,\n  TVal,\n>(\n  column: ColumnConfig<TData, TType, TVal>,\n  values: string[] | ColumnOption[],\n): Map<string, number> {\n  // console.time('getFacetedUniqueValues')\n  if (!isAnyOf(column.type, ['option', 'multiOption'])) {\n    // console.timeEnd('getFacetedUniqueValues')\n    // console.warn(\n    //   'Faceted unique values can only be retrieved for option and multiOption columns',\n    // )\n    return new Map<string, number>()\n  }\n\n  const acc = new Map<string, number>()\n\n  if (isColumnOptionArray(values)) {\n    for (const option of values) {\n      const curr = acc.get(option.value) ?? 0\n      acc.set(option.value, curr + 1)\n    }\n  } else {\n    for (const option of values) {\n      const curr = acc.get(option as string) ?? 0\n      acc.set(option as string, curr + 1)\n    }\n  }\n\n  // console.timeEnd('getFacetedUniqueValues')\n\n  return acc\n}\n\nexport function getFacetedMinMaxValues<\n  TData,\n  TType extends ColumnDataType,\n  TVal,\n>(column: ColumnConfig<TData, TType, TVal>, data: TData[]): number[] {\n  if (column.type !== 'number') return [0, 0] // Only applicable to number columns\n\n  const values = data\n    .flatMap((row) => column.accessor(row) as Nullable<number>)\n    .filter((v): v is number => typeof v === 'number' && !Number.isNaN(v))\n\n  if (values.length === 0) {\n    return [column.min ?? 0, column.max ?? 100] // Fallback to config or reasonable defaults\n  }\n\n  const min = Math.min(...values)\n  const max = Math.max(...values)\n\n  // Apply config overrides if provided\n  return [\n    column.min !== undefined ? Math.max(min, column.min) : min,\n    column.max !== undefined ? Math.min(max, column.max) : max,\n  ]\n}\n\nexport function createColumns<TData>(\n  data: TData[],\n  columnConfigs: ColumnConfig<TData>[],\n): Column<TData>[] {\n  return columnConfigs.map((columnConfig) => {\n    const getOptions: () => ColumnOption[] = memo(\n      () => [data],\n      () => getColumnOptions(columnConfig, data),\n      { key: `options-${columnConfig.id}` },\n    )\n\n    const getValues: () => ElementType<NonNullable<any>>[] = memo(\n      () => [data],\n      () => getColumnValues(columnConfig, data),\n      { key: `values-${columnConfig.id}` },\n    )\n\n    const getUniqueValues: () => Map<string, number> = memo(\n      () => [getValues()],\n      (deps) => getFacetedUniqueValues(columnConfig, deps[0]),\n      { key: `faceted-${columnConfig.id}` },\n    )\n\n    const getMinMaxValues: () => number[] = memo(\n      () => [data],\n      () => getFacetedMinMaxValues(columnConfig, data),\n      { key: `minmax-${columnConfig.id}` },\n    )\n\n    // Create the Column instance\n    const column: Column<TData> = {\n      ...columnConfig,\n      getOptions,\n      getValues,\n      getFacetedUniqueValues: getUniqueValues,\n      getFacetedMinMaxValues: getMinMaxValues,\n      // Prefetch methods will be added below\n      prefetchOptions: async () => {}, // Placeholder, defined below\n      prefetchValues: async () => {},\n      prefetchFacetedUniqueValues: async () => {},\n      _prefetchedOptionsCache: null, // Initialize private cache\n      _prefetchedValuesCache: null,\n      _prefetchedFacetedCache: null,\n    }\n\n    // Define prefetch methods with access to the column instance\n    column.prefetchOptions = async (): Promise<void> => {\n      if (!column._prefetchedOptionsCache) {\n        await new Promise((resolve) =>\n          setTimeout(() => {\n            const options = getOptions()\n            column._prefetchedOptionsCache = options\n            // console.log(`Prefetched options for ${columnConfig.id}`)\n            resolve(undefined)\n          }, 0),\n        )\n      }\n    }\n\n    column.prefetchValues = async (): Promise<void> => {\n      if (!column._prefetchedValuesCache) {\n        await new Promise((resolve) =>\n          setTimeout(() => {\n            const values = getValues()\n            column._prefetchedValuesCache = values\n            // console.log(`Prefetched values for ${columnConfig.id}`)\n            resolve(undefined)\n          }, 0),\n        )\n      }\n    }\n\n    column.prefetchFacetedUniqueValues = async (): Promise<void> => {\n      if (!column._prefetchedFacetedCache) {\n        await new Promise((resolve) =>\n          setTimeout(() => {\n            const facetedMap = getUniqueValues()\n            column._prefetchedFacetedCache = facetedMap\n            // console.log(\n            //   `Prefetched faceted unique values for ${columnConfig.id}`,\n            // )\n            resolve(undefined)\n          }, 0),\n        )\n      }\n    }\n\n    return column\n  })\n}\n\nexport function getColumn<TData>(columns: Column<TData>[], id: string) {\n  const column = columns.find((c) => c.id === id)\n\n  if (!column) {\n    throw new Error(`Column with id ${id} not found`)\n  }\n\n  return column\n}\n\nexport function createNumberFilterValue(\n  values: number[] | undefined,\n): number[] {\n  if (!values || values.length === 0) return []\n  if (values.length === 1) return [values[0]]\n  if (values.length === 2) return createNumberRange(values)\n  return [values[0], values[1]]\n}\n\nexport function createNumberRange(values: number[] | undefined) {\n  let a = 0\n  let b = 0\n\n  if (!values || values.length === 0) return [a, b]\n  if (values.length === 1) {\n    a = values[0]\n  } else {\n    a = values[0]\n    b = values[1]\n  }\n\n  const [min, max] = a < b ? [a, b] : [b, a]\n\n  return [min, max]\n}\n\nexport function isColumnOption(value: unknown): value is ColumnOption {\n  return (\n    typeof value === 'object' &&\n    value !== null &&\n    'value' in value &&\n    'label' in value\n  )\n}\n\nexport function isColumnOptionArray(value: unknown): value is ColumnOption[] {\n  return Array.isArray(value) && value.every(isColumnOption)\n}\n\nexport function isStringArray(value: unknown): value is string[] {\n  return Array.isArray(value) && value.every((v) => typeof v === 'string')\n}\n",
      "type": "registry:file",
      "target": "components/data-table-filter/core/filters.ts"
    },
    {
      "path": "registry/data-table-filter-v2/core/operators.ts",
      "content": "import type {\n  ColumnDataType,\n  FilterDetails,\n  FilterOperatorTarget,\n  FilterOperators,\n  FilterTypeOperatorDetails,\n  FilterValues,\n} from '@/registry/data-table-filter-v2/core/types'\n\nexport const DEFAULT_OPERATORS: Record<\n  ColumnDataType,\n  Record<FilterOperatorTarget, FilterOperators[ColumnDataType]>\n> = {\n  text: {\n    single: 'contains',\n    multiple: 'contains',\n  },\n  number: {\n    single: 'is',\n    multiple: 'is between',\n  },\n  date: {\n    single: 'is',\n    multiple: 'is between',\n  },\n  option: {\n    single: 'is',\n    multiple: 'is any of',\n  },\n  multiOption: {\n    single: 'include',\n    multiple: 'include any of',\n  },\n}\n\n/* Details for all the filter operators for option data type */\nexport const optionFilterDetails = {\n  is: {\n    label: 'is',\n    value: 'is',\n    target: 'single',\n    singularOf: 'is any of',\n    relativeOf: 'is not',\n    isNegated: false,\n    negation: 'is not',\n  },\n  'is not': {\n    label: 'is not',\n    value: 'is not',\n    target: 'single',\n    singularOf: 'is none of',\n    relativeOf: 'is',\n    isNegated: true,\n    negationOf: 'is',\n  },\n  'is any of': {\n    label: 'is any of',\n    value: 'is any of',\n    target: 'multiple',\n    pluralOf: 'is',\n    relativeOf: 'is none of',\n    isNegated: false,\n    negation: 'is none of',\n  },\n  'is none of': {\n    label: 'is none of',\n    value: 'is none of',\n    target: 'multiple',\n    pluralOf: 'is not',\n    relativeOf: 'is any of',\n    isNegated: true,\n    negationOf: 'is any of',\n  },\n} as const satisfies FilterDetails<'option'>\n\n/* Details for all the filter operators for multi-option data type */\nexport const multiOptionFilterDetails = {\n  include: {\n    label: 'include',\n    value: 'include',\n    target: 'single',\n    singularOf: 'include any of',\n    relativeOf: 'exclude',\n    isNegated: false,\n    negation: 'exclude',\n  },\n  exclude: {\n    label: 'exclude',\n    value: 'exclude',\n    target: 'single',\n    singularOf: 'exclude if any of',\n    relativeOf: 'include',\n    isNegated: true,\n    negationOf: 'include',\n  },\n  'include any of': {\n    label: 'include any of',\n    value: 'include any of',\n    target: 'multiple',\n    pluralOf: 'include',\n    relativeOf: ['exclude if all', 'include all of', 'exclude if any of'],\n    isNegated: false,\n    negation: 'exclude if all',\n  },\n  'exclude if all': {\n    label: 'exclude if all',\n    value: 'exclude if all',\n    target: 'multiple',\n    pluralOf: 'exclude',\n    relativeOf: ['include any of', 'include all of', 'exclude if any of'],\n    isNegated: true,\n    negationOf: 'include any of',\n  },\n  'include all of': {\n    label: 'include all of',\n    value: 'include all of',\n    target: 'multiple',\n    pluralOf: 'include',\n    relativeOf: ['include any of', 'exclude if all', 'exclude if any of'],\n    isNegated: false,\n    negation: 'exclude if any of',\n  },\n  'exclude if any of': {\n    label: 'exclude if any of',\n    value: 'exclude if any of',\n    target: 'multiple',\n    pluralOf: 'exclude',\n    relativeOf: ['include any of', 'exclude if all', 'include all of'],\n    isNegated: true,\n    negationOf: 'include all of',\n  },\n} as const satisfies FilterDetails<'multiOption'>\n\n/* Details for all the filter operators for date data type */\nexport const dateFilterDetails = {\n  is: {\n    label: 'is',\n    value: 'is',\n    target: 'single',\n    singularOf: 'is between',\n    relativeOf: 'is after',\n    isNegated: false,\n    negation: 'is before',\n  },\n  'is not': {\n    label: 'is not',\n    value: 'is not',\n    target: 'single',\n    singularOf: 'is not between',\n    relativeOf: [\n      'is',\n      'is before',\n      'is on or after',\n      'is after',\n      'is on or before',\n    ],\n    isNegated: true,\n    negationOf: 'is',\n  },\n  'is before': {\n    label: 'is before',\n    value: 'is before',\n    target: 'single',\n    singularOf: 'is between',\n    relativeOf: [\n      'is',\n      'is not',\n      'is on or after',\n      'is after',\n      'is on or before',\n    ],\n    isNegated: false,\n    negation: 'is on or after',\n  },\n  'is on or after': {\n    label: 'is on or after',\n    value: 'is on or after',\n    target: 'single',\n    singularOf: 'is between',\n    relativeOf: ['is', 'is not', 'is before', 'is after', 'is on or before'],\n    isNegated: false,\n    negation: 'is before',\n  },\n  'is after': {\n    label: 'is after',\n    value: 'is after',\n    target: 'single',\n    singularOf: 'is between',\n    relativeOf: [\n      'is',\n      'is not',\n      'is before',\n      'is on or after',\n      'is on or before',\n    ],\n    isNegated: false,\n    negation: 'is on or before',\n  },\n  'is on or before': {\n    label: 'is on or before',\n    value: 'is on or before',\n    target: 'single',\n    singularOf: 'is between',\n    relativeOf: ['is', 'is not', 'is after', 'is on or after', 'is before'],\n    isNegated: false,\n    negation: 'is after',\n  },\n  'is between': {\n    label: 'is between',\n    value: 'is between',\n    target: 'multiple',\n    pluralOf: 'is',\n    relativeOf: 'is not between',\n    isNegated: false,\n    negation: 'is not between',\n  },\n  'is not between': {\n    label: 'is not between',\n    value: 'is not between',\n    target: 'multiple',\n    pluralOf: 'is not',\n    relativeOf: 'is between',\n    isNegated: true,\n    negationOf: 'is between',\n  },\n} as const satisfies FilterDetails<'date'>\n\n/* Details for all the filter operators for text data type */\nexport const textFilterDetails = {\n  contains: {\n    label: 'contains',\n    value: 'contains',\n    target: 'single',\n    relativeOf: 'does not contain',\n    isNegated: false,\n    negation: 'does not contain',\n  },\n  'does not contain': {\n    label: 'does not contain',\n    value: 'does not contain',\n    target: 'single',\n    relativeOf: 'contains',\n    isNegated: true,\n    negationOf: 'contains',\n  },\n} as const satisfies FilterDetails<'text'>\n\n/* Details for all the filter operators for number data type */\nexport const numberFilterDetails = {\n  is: {\n    label: 'is',\n    value: 'is',\n    target: 'single',\n    singularOf: 'is between',\n    relativeOf: [\n      'is not',\n      'is greater than',\n      'is less than or equal to',\n      'is less than',\n      'is greater than or equal to',\n    ],\n    isNegated: false,\n    negation: 'is not',\n  },\n  'is not': {\n    label: 'is not',\n    value: 'is not',\n    target: 'single',\n    singularOf: 'is not between',\n    relativeOf: [\n      'is',\n      'is greater than',\n      'is less than or equal to',\n      'is less than',\n      'is greater than or equal to',\n    ],\n    isNegated: true,\n    negationOf: 'is',\n  },\n  'is greater than': {\n    label: '>',\n    value: 'is greater than',\n    target: 'single',\n    singularOf: 'is between',\n    relativeOf: [\n      'is',\n      'is not',\n      'is less than or equal to',\n      'is less than',\n      'is greater than or equal to',\n    ],\n    isNegated: false,\n    negation: 'is less than or equal to',\n  },\n  'is greater than or equal to': {\n    label: '>=',\n    value: 'is greater than or equal to',\n    target: 'single',\n    singularOf: 'is between',\n    relativeOf: [\n      'is',\n      'is not',\n      'is greater than',\n      'is less than or equal to',\n      'is less than',\n    ],\n    isNegated: false,\n    negation: 'is less than or equal to',\n  },\n  'is less than': {\n    label: '<',\n    value: 'is less than',\n    target: 'single',\n    singularOf: 'is between',\n    relativeOf: [\n      'is',\n      'is not',\n      'is greater than',\n      'is less than or equal to',\n      'is greater than or equal to',\n    ],\n    isNegated: false,\n    negation: 'is greater than',\n  },\n  'is less than or equal to': {\n    label: '<=',\n    value: 'is less than or equal to',\n    target: 'single',\n    singularOf: 'is between',\n    relativeOf: [\n      'is',\n      'is not',\n      'is greater than',\n      'is less than',\n      'is greater than or equal to',\n    ],\n    isNegated: false,\n    negation: 'is greater than or equal to',\n  },\n  'is between': {\n    label: 'is between',\n    value: 'is between',\n    target: 'multiple',\n    pluralOf: 'is',\n    relativeOf: 'is not between',\n    isNegated: false,\n    negation: 'is not between',\n  },\n  'is not between': {\n    label: 'is not between',\n    value: 'is not between',\n    target: 'multiple',\n    pluralOf: 'is not',\n    relativeOf: 'is between',\n    isNegated: true,\n    negationOf: 'is between',\n  },\n} as const satisfies FilterDetails<'number'>\n\nexport const filterTypeOperatorDetails: FilterTypeOperatorDetails = {\n  text: textFilterDetails,\n  number: numberFilterDetails,\n  date: dateFilterDetails,\n  option: optionFilterDetails,\n  multiOption: multiOptionFilterDetails,\n}\n\n/*\n *\n * Determines the new operator for a filter based on the current operator, old and new filter values.\n *\n * This handles cases where the filter values have transitioned from a single value to multiple values (or vice versa),\n * and the current operator needs to be transitioned to its plural form (or singular form).\n *\n * For example, if the current operator is 'is', and the new filter values have a length of 2, the\n * new operator would be 'is any of'.\n *\n */\nexport function determineNewOperator<TType extends ColumnDataType>(\n  type: TType,\n  oldVals: FilterValues<TType>,\n  nextVals: FilterValues<TType>,\n  currentOperator: FilterOperators[TType],\n): FilterOperators[TType] {\n  const a =\n    Array.isArray(oldVals) && Array.isArray(oldVals[0])\n      ? oldVals[0].length\n      : oldVals.length\n  const b =\n    Array.isArray(nextVals) && Array.isArray(nextVals[0])\n      ? nextVals[0].length\n      : nextVals.length\n\n  // If filter size has not transitioned from single to multiple (or vice versa)\n  // or is unchanged, return the current operator.\n  if (a === b || (a >= 2 && b >= 2) || (a <= 1 && b <= 1))\n    return currentOperator\n\n  const opDetails = filterTypeOperatorDetails[type][currentOperator]\n\n  // Handle transition from single to multiple filter values.\n  if (a < b && b >= 2) return opDetails.singularOf ?? currentOperator\n  // Handle transition from multiple to single filter values.\n  if (a > b && b <= 1) return opDetails.pluralOf ?? currentOperator\n  return currentOperator\n}\n",
      "type": "registry:file",
      "target": "components/data-table-filter/core/operators.ts"
    },
    {
      "path": "registry/data-table-filter-v2/core/types.ts",
      "content": "import type { LucideIcon } from 'lucide-react'\n\n/*\n * # GENERAL NOTES:\n *\n * ## GENERICS:\n *\n * TData is the shape of a single row in your data table.\n * TVal is the shape of the underlying value for a column.\n * TType is the type (kind) of the column.\n *\n */\n\nexport type ElementType<T> = T extends (infer U)[] ? U : T\n\nexport type Nullable<T> = T | null | undefined\n\n/*\n * The model of a column option.\n * Used for representing underlying column values of type `option` or `multiOption`.\n */\nexport interface ColumnOption {\n  /* The label to display for the option. */\n  label: string\n  /* The internal value of the option. */\n  value: string\n  /* An optional icon to display next to the label. */\n  icon?: React.ReactElement | React.ElementType\n}\n\n/*\n * Represents the data type (kind) of a column.\n */\nexport type ColumnDataType =\n  /* The column value is a string that should be searchable. */\n  | 'text'\n  | 'number'\n  | 'date'\n  /* The column value can be a single value from a list of options. */\n  | 'option'\n  /* The column value can be zero or more values from a list of options. */\n  | 'multiOption'\n\n/*\n * Represents the data type (kind) of option and multi-option columns.\n */\nexport type OptionBasedColumnDataType = Extract<\n  ColumnDataType,\n  'option' | 'multiOption'\n>\n\n/*\n * Maps a ColumnDataType to it's primitive type (i.e. string, number, etc.).\n */\nexport type ColumnDataNativeMap = {\n  text: string\n  number: number\n  date: Date\n  option: string\n  multiOption: string[]\n}\n\n/*\n * Represents the value of a column filter.\n * Contigent on the filtered column's data type.\n */\nexport type FilterValues<T extends ColumnDataType> = Array<\n  ElementType<ColumnDataNativeMap[T]>\n>\n\n/*\n * An accessor function for a column's data.\n * Uses the original row data as an argument.\n */\nexport type TAccessorFn<TData, TVal = unknown> = (data: TData) => TVal\n\n/*\n * Used by `option` and `multiOption` columns.\n * Transforms the underlying column value into a valid ColumnOption.\n */\nexport type TTransformOptionFn<TVal = unknown> = (\n  value: ElementType<NonNullable<TVal>>,\n) => ColumnOption\n\n/*\n * Used by `option` and `multiOption` columns.\n * A custom ordering function when sorting a column's options.\n */\nexport type TOrderFn<TVal = unknown> = (\n  a: ElementType<NonNullable<TVal>>,\n  b: ElementType<NonNullable<TVal>>,\n) => number\n\n/*\n * The configuration for a column.\n */\nexport type ColumnConfig<\n  TData,\n  TType extends ColumnDataType = any,\n  TVal = unknown,\n> = {\n  id: string\n  accessor: TAccessorFn<TData, TVal>\n  displayName: string\n  icon: LucideIcon\n  type: TType\n  options?: TType extends OptionBasedColumnDataType ? ColumnOption[] : never\n  min?: TType extends 'number' ? number : never\n  max?: TType extends 'number' ? number : never\n  transformOptionFn?: TType extends OptionBasedColumnDataType\n    ? TTransformOptionFn<TVal>\n    : never\n  orderFn?: TType extends OptionBasedColumnDataType ? TOrderFn<TVal> : never\n}\n\n/*\n * Describes a helper function for creating column configurations.\n */\nexport type ColumnConfigHelper<TData> = {\n  accessor: <\n    TAccessor extends TAccessorFn<TData>,\n    TType extends ColumnDataType,\n    TVal extends ReturnType<TAccessor>,\n  >(\n    accessor: TAccessor,\n    config?: Omit<ColumnConfig<TData, TType, TVal>, 'accessor'>,\n  ) => ColumnConfig<TData, TType, unknown>\n}\n\nexport type DataTableFilterConfig<TData> = {\n  data: TData[]\n  columns: ColumnConfig<TData>[]\n}\n\nexport type ColumnProperties<TData, TVal> = {\n  getOptions: () => ColumnOption[]\n  getValues: () => ElementType<NonNullable<TVal>>[]\n  getFacetedUniqueValues: () => Map<string, number>\n  getFacetedMinMaxValues: () => number[]\n  prefetchOptions: () => Promise<void> // Prefetch options\n  prefetchValues: () => Promise<void> // Prefetch values\n  prefetchFacetedUniqueValues: () => Promise<void> // Prefetch faceted unique values\n}\n\nexport type ColumnPrivateProperties<TData, TVal> = {\n  _prefetchedOptionsCache: ColumnOption[] | null\n  _prefetchedValuesCache: ElementType<NonNullable<TVal>>[] | null\n  _prefetchedFacetedCache: Map<string, number> | null\n}\n\nexport type Column<\n  TData,\n  TType extends ColumnDataType = any,\n  TVal = unknown,\n> = ColumnConfig<TData, TType, TVal> &\n  ColumnProperties<TData, TVal> &\n  ColumnPrivateProperties<TData, TVal>\n\n/*\n * Describes the available actions on column filters.\n * Includes both column-specific and global actions, ultimately acting on the column filters.\n */\nexport interface DataTableFilterActions {\n  addFilterValue: <TData, TType extends OptionBasedColumnDataType>(\n    column: Column<TData, TType>,\n    values: FilterModel<TType>['values'],\n  ) => void\n\n  removeFilterValue: <TData, TType extends OptionBasedColumnDataType>(\n    column: Column<TData, TType>,\n    value: FilterModel<TType>['values'],\n  ) => void\n\n  setFilterValue: <TData, TType extends ColumnDataType>(\n    column: Column<TData, TType>,\n    values: FilterModel<TType>['values'],\n  ) => void\n\n  setFilterOperator: <TType extends ColumnDataType>(\n    columnId: string,\n    operator: FilterModel<TType>['operator'],\n  ) => void\n\n  removeFilter: (columnId: string) => void\n\n  removeAllFilters: () => void\n}\n\n/* Operators for text data */\nexport type TextFilterOperator = 'contains' | 'does not contain'\n\n/* Operators for number data */\nexport type NumberFilterOperator =\n  | 'is'\n  | 'is not'\n  | 'is less than'\n  | 'is greater than or equal to'\n  | 'is greater than'\n  | 'is less than or equal to'\n  | 'is between'\n  | 'is not between'\n\n/* Operators for date data */\nexport type DateFilterOperator =\n  | 'is'\n  | 'is not'\n  | 'is before'\n  | 'is on or after'\n  | 'is after'\n  | 'is on or before'\n  | 'is between'\n  | 'is not between'\n\n/* Operators for option data */\nexport type OptionFilterOperator = 'is' | 'is not' | 'is any of' | 'is none of'\n\n/* Operators for multi-option data */\nexport type MultiOptionFilterOperator =\n  | 'include'\n  | 'exclude'\n  | 'include any of'\n  | 'include all of'\n  | 'exclude if any of'\n  | 'exclude if all'\n\n/* Maps filter operators to their respective data types */\nexport type FilterOperators = {\n  text: TextFilterOperator\n  number: NumberFilterOperator\n  date: DateFilterOperator\n  option: OptionFilterOperator\n  multiOption: MultiOptionFilterOperator\n}\n\n/*\n *\n * FilterValue is a type that represents a filter value for a specific column.\n *\n * It consists of:\n * - Operator: The operator to be used for the filter.\n * - Values: An array of values to be used for the filter.\n *\n */\nexport type FilterModel<TType extends ColumnDataType = any> = {\n  columnId: string\n  operator: FilterOperators[TType]\n  values: FilterValues<TType>\n}\n\nexport type FiltersState = Array<FilterModel>\n\n/*\n * FilterDetails is a type that represents the details of all the filter operators for a specific column data type.\n */\nexport type FilterDetails<T extends ColumnDataType> = {\n  [key in FilterOperators[T]]: FilterOperatorDetails<key, T>\n}\n\nexport type FilterOperatorTarget = 'single' | 'multiple'\n\nexport type FilterOperatorDetailsBase<\n  OperatorValue,\n  T extends ColumnDataType,\n> = {\n  /* The operator value. Usually the string representation of the operator. */\n  value: OperatorValue\n  /* The label for the operator, to show in the UI. */\n  label: string\n  /* How much data the operator applies to. */\n  target: FilterOperatorTarget\n  /* The plural form of the operator, if applicable. */\n  singularOf?: FilterOperators[T]\n  /* The singular form of the operator, if applicable. */\n  pluralOf?: FilterOperators[T]\n  /* All related operators. Normally, all the operators which share the same target. */\n  relativeOf: FilterOperators[T] | Array<FilterOperators[T]>\n  /* Whether the operator is negated. */\n  isNegated: boolean\n  /* If the operator is not negated, this provides the negated equivalent. */\n  negation?: FilterOperators[T]\n  /* If the operator is negated, this provides the positive equivalent. */\n  negationOf?: FilterOperators[T]\n}\n\n/*\n *\n * FilterOperatorDetails is a type that provides details about a filter operator for a specific column data type.\n * It extends FilterOperatorDetailsBase with additional logic and contraints on the defined properties.\n *\n */\nexport type FilterOperatorDetails<\n  OperatorValue,\n  T extends ColumnDataType,\n> = FilterOperatorDetailsBase<OperatorValue, T> &\n  (\n    | { singularOf?: never; pluralOf?: never }\n    | { target: 'single'; singularOf: FilterOperators[T]; pluralOf?: never }\n    | { target: 'multiple'; singularOf?: never; pluralOf: FilterOperators[T] }\n  ) &\n  (\n    | { isNegated: false; negation: FilterOperators[T]; negationOf?: never }\n    | { isNegated: true; negation?: never; negationOf: FilterOperators[T] }\n  )\n\n/* Maps column data types to their respective filter operator details */\nexport type FilterTypeOperatorDetails = {\n  [key in ColumnDataType]: FilterDetails<key>\n}\n",
      "type": "registry:file",
      "target": "components/data-table-filter/core/types.ts"
    },
    {
      "path": "registry/data-table-filter-v2/hooks/use-data-table-filters.tsx",
      "content": "import {\n  createColumns,\n  createNumberFilterValue,\n} from '@/registry/data-table-filter-v2/core/filters'\nimport {\n  DEFAULT_OPERATORS,\n  determineNewOperator,\n} from '@/registry/data-table-filter-v2/core/operators'\nimport type {\n  ColumnConfig,\n  ColumnDataType,\n  DataTableFilterActions,\n  FilterModel,\n  FiltersState,\n  OptionBasedColumnDataType,\n} from '@/registry/data-table-filter-v2/core/types'\nimport { addUniq, removeUniq } from '@/registry/data-table-filter-v2/lib/array'\nimport { uniq } from '@/registry/data-table-filter/lib/array'\nimport { useEffect, useMemo, useState } from 'react'\n\nexport function useDataTableFilters<TData>(\n  data: TData[],\n  columnsConfig: ColumnConfig<TData>[],\n  controlledState?:\n    | [FiltersState, React.Dispatch<React.SetStateAction<FiltersState>>]\n    | undefined,\n) {\n  const [internalFilters, setInternalFilters] = useState<FiltersState>([])\n  const [filters, setFilters] = controlledState ?? [\n    internalFilters,\n    setInternalFilters,\n  ]\n\n  // This useMemo call ensures that createColumns() only recomputes when data or config.columns change.\n  const columns = useMemo(() => {\n    console.log('[useDataTableFilters] Computing columns')\n    return createColumns(data, columnsConfig)\n  }, [data, columnsConfig])\n\n  const actions: DataTableFilterActions = useMemo(\n    () => ({\n      addFilterValue<TData, TType extends OptionBasedColumnDataType>(\n        column: ColumnConfig<TData, TType>,\n        values: FilterModel<TType>['values'],\n      ) {\n        if (column.type === 'option') {\n          setFilters((prev) => {\n            // Does column already have a filter?\n            const filter = prev.find((f) => f.columnId === column.id) // as FilterModel<'option'> | undefined\n\n            const isColumnFiltered = filter && filter.values.length > 0\n            if (!isColumnFiltered) {\n              // Add a new filter\n              return [\n                ...prev,\n                {\n                  columnId: column.id,\n                  operator:\n                    values.length > 1\n                      ? DEFAULT_OPERATORS[column.type].multiple\n                      : DEFAULT_OPERATORS[column.type].single,\n                  values,\n                },\n              ]\n            }\n\n            // Column already has a filter - update it\n            const oldValues = filter.values\n            const newValues = addUniq(filter.values, values)\n            const newOperator = determineNewOperator(\n              'option',\n              oldValues,\n              newValues,\n              filter.operator,\n            )\n\n            return prev.map((f) =>\n              f.columnId === column.id\n                ? {\n                    columnId: column.id,\n                    operator: newOperator,\n                    values: newValues,\n                  }\n                : f,\n            )\n          })\n\n          return\n        }\n\n        if (column.type === 'multiOption') {\n          setFilters((prev) => {\n            // Does column already have a filter?\n            const filter = prev.find((f) => f.columnId === column.id) // as FilterModel<'multiOption'> | undefined\n\n            const isColumnFiltered = filter && filter.values.length > 0\n            if (!isColumnFiltered) {\n              // Add a new filter\n              return [\n                ...prev,\n                {\n                  columnId: column.id,\n                  operator:\n                    values.length > 1\n                      ? DEFAULT_OPERATORS[column.type].multiple\n                      : DEFAULT_OPERATORS[column.type].single,\n                  values,\n                },\n              ]\n            }\n\n            // Column already has a filter - update it\n            const oldValues = filter.values\n            const newValues = addUniq(filter.values, values)\n            const newOperator = determineNewOperator(\n              'multiOption',\n              oldValues,\n              newValues,\n              filter.operator,\n            )\n\n            // Remove filter if it's empty now\n            if (newValues.length === 0) {\n              return prev.filter((f) => f.columnId !== column.id)\n            }\n\n            return prev.map((f) =>\n              f.columnId === column.id\n                ? {\n                    columnId: column.id,\n                    operator: newOperator,\n                    values: newValues,\n                  }\n                : f,\n            )\n          })\n\n          return\n        }\n\n        throw new Error(\n          '[data-table-filter] addFilterValue() is only supported for option columns',\n        )\n      },\n      removeFilterValue<TData, TType extends OptionBasedColumnDataType>(\n        column: ColumnConfig<TData, TType>,\n        value: FilterModel<TType>['values'],\n      ) {\n        if (column.type === 'option') {\n          setFilters((prev) => {\n            // Does column already have a filter?\n            const filter = prev.find((f) => f.columnId === column.id) // as FilterModel<'option'> | undefined\n\n            const isColumnFiltered = filter && filter.values.length > 0\n            if (!isColumnFiltered) {\n              // Add a new filter\n              return [...prev]\n            }\n\n            // Column already has a filter - update it\n            const newValues = removeUniq(filter.values, value)\n            const oldValues = filter.values\n\n            const newOperator = determineNewOperator(\n              'option',\n              oldValues,\n              newValues,\n              filter.operator,\n            )\n\n            // Remove filter if it's empty now\n            if (newValues.length === 0) {\n              return prev.filter((f) => f.columnId !== column.id)\n            }\n\n            return prev.map((f) =>\n              f.columnId === column.id\n                ? {\n                    columnId: column.id,\n                    operator: newOperator,\n                    values: newValues,\n                  }\n                : f,\n            )\n          })\n\n          return\n        }\n\n        if (column.type === 'multiOption') {\n          setFilters((prev) => {\n            // Does column already have a filter?\n            const filter = prev.find((f) => f.columnId === column.id) // as FilterModel<'multiOption'> | undefined\n\n            const isColumnFiltered = filter && filter.values.length > 0\n            if (!isColumnFiltered) {\n              // Do nothing if column is not filtered\n              return [...prev]\n            }\n\n            // Column already has a filter - update it\n            const newValues = removeUniq(filter.values, value)\n            const oldValues = filter.values\n\n            const newOperator = determineNewOperator(\n              'multiOption',\n              oldValues,\n              newValues,\n              filter.operator,\n            )\n\n            // Remove filter if it's empty now\n            if (newValues.length === 0) {\n              return prev.filter((f) => f.columnId !== column.id)\n            }\n\n            return prev.map((f) =>\n              f.columnId === column.id\n                ? {\n                    columnId: column.id,\n                    operator: newOperator,\n                    values: newValues,\n                  }\n                : f,\n            )\n          })\n\n          return\n        }\n\n        throw new Error(\n          '[data-table-filter] removeFilterValue() is only supported for option columns',\n        )\n      },\n\n      setFilterValue<TData, TType extends ColumnDataType>(\n        column: ColumnConfig<TData, TType>,\n        values: FilterModel<TType>['values'],\n      ) {\n        console.log('here!')\n        setFilters((prev) => {\n          // Does this column already have a filter?\n          const filter = prev.find((f) => f.columnId === column.id)\n          const isColumnFiltered = filter && filter.values.length > 0\n\n          const newValues =\n            column.type === 'number'\n              ? createNumberFilterValue(values as number[])\n              : uniq(values)\n\n          if (newValues.length === 0) return prev\n\n          if (!isColumnFiltered) {\n            // Add a new filter\n            return [\n              ...prev,\n              {\n                columnId: column.id,\n                operator:\n                  values.length > 1\n                    ? DEFAULT_OPERATORS[column.type].multiple\n                    : DEFAULT_OPERATORS[column.type].single,\n                values: newValues,\n              },\n            ]\n          }\n\n          // Column already has a filter - override it\n          const oldValues = filter.values\n          const newOperator = determineNewOperator(\n            column.type,\n            oldValues,\n            newValues,\n            filter.operator,\n          )\n\n          const newFilter = {\n            columnId: column.id,\n            operator: newOperator,\n            values: newValues as any,\n          } satisfies FilterModel<TType>\n\n          return prev.map((f) => (f.columnId === column.id ? newFilter : f))\n        })\n      },\n      setFilterOperator<TType extends ColumnDataType>(\n        columnId: string,\n        operator: FilterModel<TType>['operator'],\n      ) {\n        setFilters((prev) =>\n          prev.map((f) => (f.columnId === columnId ? { ...f, operator } : f)),\n        )\n      },\n      removeFilter(columnId: string) {\n        setFilters((prev) => prev.filter((f) => f.columnId !== columnId))\n      },\n      removeAllFilters() {\n        setFilters([])\n      },\n    }),\n    [setFilters],\n  )\n\n  return { columns, filters, actions }\n}\n",
      "type": "registry:file",
      "target": "components/data-table-filter/hooks/use-data-table-filters.tsx"
    },
    {
      "path": "registry/data-table-filter-v2/integrations/tanstack-table.tsx",
      "content": "import {\n  isColumnOption,\n  isColumnOptionArray,\n  isStringArray,\n} from '@/registry/data-table-filter-v2/core/filters'\nimport type {\n  ColumnConfig,\n  FilterModel,\n  FiltersState,\n} from '@/registry/data-table-filter-v2/core/types'\nimport { isAnyOf } from '@/registry/data-table-filter-v2/lib/array'\nimport {\n  __multiOptionFilterFn,\n  __optionFilterFn,\n  filterFn,\n} from '@/registry/data-table-filter-v2/lib/filter-fns'\nimport type { ColumnDef, ColumnFiltersState } from '@tanstack/react-table'\n\ninterface CreateTSTColumns<TData> {\n  columns: ColumnDef<TData>[]\n  configs: ColumnConfig<TData>[]\n}\n\nexport function createTSTColumns<TData>({\n  columns,\n  configs,\n}: CreateTSTColumns<TData>) {\n  const _cols: ColumnDef<TData>[] = []\n\n  for (const col of columns) {\n    // Get the column filter config for this column\n    const config = configs.find((c) => c.id === col.id)\n\n    // If the column is not filterable or doesn't have a filter config, skip it\n    if (!col.enableColumnFilter || !config) {\n      _cols.push(col)\n      continue\n    }\n\n    if (isAnyOf(config.type, ['text', 'number', 'date'])) {\n      col.filterFn = filterFn(config.type)\n      _cols.push(col)\n      continue\n    }\n\n    if (config.type === 'option') {\n      col.filterFn = (row, columnId, filterValue: FilterModel<'option'>) => {\n        const value = row.getValue(columnId)\n\n        if (!value) return false\n\n        if (typeof value === 'string') {\n          return __optionFilterFn(value, filterValue)\n        }\n\n        if (isColumnOption(value)) {\n          return __optionFilterFn(value.value, filterValue)\n        }\n\n        const sanitizedValue = config.transformOptionFn!(value as never)\n        return __optionFilterFn(sanitizedValue.value, filterValue)\n      }\n    }\n\n    if (config.type === 'multiOption') {\n      col.filterFn = (\n        row,\n        columnId,\n        filterValue: FilterModel<'multiOption'>,\n      ) => {\n        const value = row.getValue(columnId)\n\n        if (!value) return false\n\n        if (isStringArray(value)) {\n          return __multiOptionFilterFn(value, filterValue)\n        }\n\n        if (isColumnOptionArray(value)) {\n          return __multiOptionFilterFn(\n            value.map((v) => v.value),\n            filterValue,\n          )\n        }\n\n        const sanitizedValue = (value as never[]).map((v) =>\n          config.transformOptionFn!(v),\n        )\n\n        return __multiOptionFilterFn(\n          sanitizedValue.map((v) => v.value),\n          filterValue,\n        )\n      }\n    }\n\n    _cols.push(col)\n  }\n\n  return _cols\n}\n\nexport function createTSTFilters(filters: FiltersState): ColumnFiltersState {\n  return filters.map((filter) => ({ id: filter.columnId, value: filter }))\n}\n",
      "type": "registry:file",
      "target": "components/data-table-filter/integrations/tanstack-table.tsx"
    },
    {
      "path": "registry/data-table-filter-v2/lib/array.ts",
      "content": "export function intersection<T>(a: T[], b: T[]): T[] {\n  return a.filter((x) => b.includes(x))\n}\n\nexport function uniq<T>(a: T[]): T[] {\n  return Array.from(new Set(a))\n}\n\nexport function take<T>(a: T[], n: number): T[] {\n  return a.slice(0, n)\n}\n\nexport function flatten<T>(a: T[][]): T[] {\n  return a.flat()\n}\n\nexport function addUniq<T>(arr: T[], values: T[]): T[] {\n  return uniq([...arr, ...values])\n}\n\nexport function removeUniq<T>(arr: T[], values: T[]): T[] {\n  return arr.filter((v) => !values.includes(v))\n}\n\nexport function isAnyOf<T>(value: T, values: T[]): boolean {\n  return values.includes(value)\n}\n",
      "type": "registry:file",
      "target": "components/data-table-filter/lib/array.ts"
    },
    {
      "path": "registry/data-table-filter-v2/lib/filter-fns.ts",
      "content": "/**********************************************************************************************************\n ***** Filter Functions ******\n **********************************************************************************************************\n * These are functions that filter data based on the current filter values, column data type, and operator.\n * There exists a separate filter function for each column data type.\n *\n * Two variants of the filter functions are provided - as an example, we will take the optionFilterFn:\n * 1. optionFilterFn: takes in a row, columnId, and filterValue.\n * 2. __optionFilterFn: takes in an inputData and filterValue.\n *\n * __optionFilterFn is a private function that is used by filterFn to perform the actual filtering.\n * *********************************************************************************************************/\n\nimport {\n  isColumnOption,\n  isColumnOptionArray,\n  isStringArray,\n} from '@/registry/data-table-filter-v2/core/filters'\nimport { dateFilterDetails } from '@/registry/data-table-filter-v2/core/operators'\nimport type {\n  ColumnDataType,\n  FilterModel,\n} from '@/registry/data-table-filter-v2/core/types'\nimport { intersection } from '@/registry/data-table-filter-v2/lib/array'\nimport type { Row } from '@tanstack/react-table'\nimport {\n  endOfDay,\n  isAfter,\n  isBefore,\n  isSameDay,\n  isWithinInterval,\n  startOfDay,\n} from 'date-fns'\n\n/*\n * Returns a filter function for a given column data type.\n * This function is used to determine the appropriate filter function to use based on the column data type.\n */\nexport function filterFn(dataType: ColumnDataType) {\n  switch (dataType) {\n    // case 'option':\n    //   return optionFilterFn\n    // case 'multiOption':\n    //   return multiOptionFilterFn\n    case 'date':\n      return dateFilterFn\n    case 'text':\n      return textFilterFn\n    case 'number':\n      return numberFilterFn\n    default:\n      throw new Error('Invalid column data type')\n  }\n}\n\n// export function optionFilterFn<TData>(\n//   row: Row<TData>,\n//   columnId: string,\n//   filterValue: FilterModel<'option'>,\n// ) {\n//   const value = row.getValue(columnId)\n\n//   if (!value) return false\n\n//   if (typeof value === 'string') {\n//     return __optionFilterFn(value, filterValue)\n//   }\n\n//   if (isColumnOption(value)) {\n//     return __optionFilterFn(value.value, filterValue)\n//   }\n\n//   const sanitizedValue = columnMeta.transformOptionFn!(value as never)\n//   return __optionFilterFn(sanitizedValue.value, filterValue)\n// }\n\nexport function __optionFilterFn<TData>(\n  inputData: string,\n  filterValue: FilterModel<'option'>,\n) {\n  if (!inputData) return false\n  if (filterValue.values.length === 0) return true\n\n  const value = inputData.toString().toLowerCase()\n\n  const found = !!filterValue.values.find((v) => v.toLowerCase() === value)\n\n  switch (filterValue.operator) {\n    case 'is':\n    case 'is any of':\n      return found\n    case 'is not':\n    case 'is none of':\n      return !found\n  }\n}\n\n// export function multiOptionFilterFn<TData>(\n//   row: Row<TData>,\n//   columnId: string,\n//   filterValue: FilterModel<'multiOption'>,\n// ) {\n//   const value = row.getValue(columnId)\n\n//   if (!value) return false\n\n//   if (isStringArray(value)) {\n//     return __multiOptionFilterFn(value, filterValue)\n//   }\n\n//   if (isColumnOptionArray(value)) {\n//     return __multiOptionFilterFn(\n//       value.map((v) => v.value),\n//       filterValue,\n//     )\n//   }\n\n//   const sanitizedValue = (value as never[]).map((v) =>\n//     columnMeta.transformOptionFn!(v),\n//   )\n\n//   return __multiOptionFilterFn(\n//     sanitizedValue.map((v) => v.value),\n//     filterValue,\n//   )\n// }\n\nexport function __multiOptionFilterFn(\n  inputData: string[],\n  filterValue: FilterModel<'multiOption'>,\n) {\n  if (!inputData) return false\n\n  if (\n    filterValue.values.length === 0 ||\n    !filterValue.values[0] ||\n    filterValue.values[0].length === 0\n  )\n    return true\n\n  const values = inputData\n  const filterValues = filterValue.values\n\n  switch (filterValue.operator) {\n    case 'include':\n    case 'include any of':\n      return intersection(values, filterValues).length > 0\n    case 'exclude':\n      return intersection(values, filterValues).length === 0\n    case 'exclude if any of':\n      return !(intersection(values, filterValues).length > 0)\n    case 'include all of':\n      return intersection(values, filterValues).length === filterValues.length\n    case 'exclude if all':\n      return !(\n        intersection(values, filterValues).length === filterValues.length\n      )\n  }\n}\n\nexport function dateFilterFn<TData>(\n  row: Row<TData>,\n  columnId: string,\n  filterValue: FilterModel<'date'>,\n) {\n  const value = row.getValue<Date>(columnId)\n\n  return __dateFilterFn(value, filterValue)\n}\n\nexport function __dateFilterFn<TData>(\n  inputData: Date,\n  filterValue: FilterModel<'date'>,\n) {\n  if (!filterValue || filterValue.values.length === 0) return true\n\n  if (\n    dateFilterDetails[filterValue.operator].target === 'single' &&\n    filterValue.values.length > 1\n  )\n    throw new Error('Singular operators require at most one filter value')\n\n  if (\n    filterValue.operator in ['is between', 'is not between'] &&\n    filterValue.values.length !== 2\n  )\n    throw new Error('Plural operators require two filter values')\n\n  const filterVals = filterValue.values\n  const d1 = filterVals[0]\n  const d2 = filterVals[1]\n\n  const value = inputData\n\n  switch (filterValue.operator) {\n    case 'is':\n      return isSameDay(value, d1)\n    case 'is not':\n      return !isSameDay(value, d1)\n    case 'is before':\n      return isBefore(value, startOfDay(d1))\n    case 'is on or after':\n      return isSameDay(value, d1) || isAfter(value, startOfDay(d1))\n    case 'is after':\n      return isAfter(value, startOfDay(d1))\n    case 'is on or before':\n      return isSameDay(value, d1) || isBefore(value, startOfDay(d1))\n    case 'is between':\n      return isWithinInterval(value, {\n        start: startOfDay(d1),\n        end: endOfDay(d2),\n      })\n    case 'is not between':\n      return !isWithinInterval(value, {\n        start: startOfDay(filterValue.values[0]),\n        end: endOfDay(filterValue.values[1]),\n      })\n  }\n}\n\nexport function textFilterFn<TData>(\n  row: Row<TData>,\n  columnId: string,\n  filterValue: FilterModel<'text'>,\n) {\n  const value = row.getValue<string>(columnId) ?? ''\n\n  return __textFilterFn(value, filterValue)\n}\n\nexport function __textFilterFn<TData>(\n  inputData: string,\n  filterValue: FilterModel<'text'>,\n) {\n  if (!filterValue || filterValue.values.length === 0) return true\n\n  const value = inputData.toLowerCase().trim()\n  const filterStr = filterValue.values[0].toLowerCase().trim()\n\n  if (filterStr === '') return true\n\n  const found = value.includes(filterStr)\n\n  switch (filterValue.operator) {\n    case 'contains':\n      return found\n    case 'does not contain':\n      return !found\n  }\n}\n\nexport function numberFilterFn<TData>(\n  row: Row<TData>,\n  columnId: string,\n  filterValue: FilterModel<'number'>,\n) {\n  const value = row.getValue<number>(columnId)\n\n  return __numberFilterFn(value, filterValue)\n}\n\nexport function __numberFilterFn<TData>(\n  inputData: number,\n  filterValue: FilterModel<'number'>,\n) {\n  if (!filterValue || !filterValue.values || filterValue.values.length === 0) {\n    return true\n  }\n\n  const value = inputData\n  const filterVal = filterValue.values[0]\n\n  switch (filterValue.operator) {\n    case 'is':\n      return value === filterVal\n    case 'is not':\n      return value !== filterVal\n    case 'is greater than':\n      return value > filterVal\n    case 'is greater than or equal to':\n      return value >= filterVal\n    case 'is less than':\n      return value < filterVal\n    case 'is less than or equal to':\n      return value <= filterVal\n    case 'is between': {\n      const lowerBound = filterValue.values[0]\n      const upperBound = filterValue.values[1]\n      return value >= lowerBound && value <= upperBound\n    }\n    case 'is not between': {\n      const lowerBound = filterValue.values[0]\n      const upperBound = filterValue.values[1]\n      return value < lowerBound || value > upperBound\n    }\n    default:\n      return true\n  }\n}\n",
      "type": "registry:file",
      "target": "components/data-table-filter/lib/filter-fns.ts"
    },
    {
      "path": "registry/data-table-filter-v2/lib/memo.ts",
      "content": "export function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => TDeps,\n  compute: (deps: TDeps) => TResult,\n  options: { key: string },\n): () => TResult {\n  let prevDeps: TDeps | undefined\n  let cachedResult: TResult | undefined\n\n  return () => {\n    // console.log(`[memo] Calling memoized function: ${options.key}`)\n\n    const deps = getDeps()\n\n    // If no previous deps or deps have changed, recompute\n    if (!prevDeps || !shallowEqual(prevDeps, deps)) {\n      // console.log(`[memo] Cache MISS - ${options.key}`)\n      cachedResult = compute(deps)\n      prevDeps = deps\n    } else {\n      // console.log(`[memo] Cache HIT - ${options.key}`)\n    }\n\n    return cachedResult!\n  }\n}\n\nfunction shallowEqual<T>(arr1: readonly T[], arr2: readonly T[]): boolean {\n  if (arr1 === arr2) return true\n  if (arr1.length !== arr2.length) return false\n\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i] !== arr2[i]) return false\n  }\n  return true\n}\n",
      "type": "registry:file",
      "target": "components/data-table-filter/lib/memo.ts"
    },
    {
      "path": "registry/data-table-filter-v2/ui/debounced-input.tsx",
      "content": "import { Input } from '@/components/ui/input'\nimport { useCallback, useEffect, useState } from 'react'\n\nexport function debounce<T extends (...args: any[]) => void>(\n  func: T,\n  wait: number,\n): (...args: Parameters<T>) => void {\n  let timeout: NodeJS.Timeout\n  return (...args: Parameters<T>) => {\n    clearTimeout(timeout)\n    timeout = setTimeout(() => func(...args), wait)\n  }\n}\n\nexport function DebouncedInput({\n  value: initialValue,\n  onChange,\n  debounceMs = 500, // This is the wait time, not the function\n  ...props\n}: {\n  value: string | number\n  onChange: (value: string | number) => void\n  debounceMs?: number\n} & Omit<React.InputHTMLAttributes<HTMLInputElement>, 'onChange'>) {\n  const [value, setValue] = useState(initialValue)\n\n  // Sync with initialValue when it changes\n  useEffect(() => {\n    setValue(initialValue)\n  }, [initialValue])\n\n  // Define the debounced function with useCallback\n  // biome-ignore lint/correctness/useExhaustiveDependencies: <explanation>\n  const debouncedOnChange = useCallback(\n    debounce((newValue: string | number) => {\n      onChange(newValue)\n    }, debounceMs), // Pass the wait time here\n    [debounceMs, onChange], // Dependencies\n  )\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = e.target.value\n    setValue(newValue) // Update local state immediately\n    debouncedOnChange(newValue) // Call debounced version\n  }\n\n  return <Input {...props} value={value} onChange={handleChange} />\n}\n",
      "type": "registry:file",
      "target": "components/data-table-filter/ui/debounced-input.tsx"
    }
  ]
}
